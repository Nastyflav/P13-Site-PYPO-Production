# Generated by Django 3.0.8 on 2020-08-24 17:05

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.embeds.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
        ('wagtailimages', '0022_uploadedimage'),
    ]

    operations = [
        migrations.CreateModel(
            name='ArtistPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('style', models.CharField(max_length=100, verbose_name='Style')),
                ('body', wagtail.core.fields.RichTextField(blank=True, verbose_name='Biographie')),
                ('video', wagtail.core.fields.StreamField([('video', wagtail.core.blocks.StructBlock([('video', wagtail.embeds.blocks.EmbedBlock(help_text='Insérer une url comme par ex. https://youtu.be/yRmZ6WUfoOc', label='Vidéo')), ('position', wagtail.core.blocks.ChoiceBlock(choices=[('right', 'Droite'), ('left', 'Gauche'), ('center', 'Centre')], label='Position', required=False)), ('size', wagtail.core.blocks.ChoiceBlock(choices=[('small', 'Petit'), ('medium', 'Médium'), ('large', 'Grand')], label='Taille', required=False))]))])),
                ('banner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailimages.Image', verbose_name='Bannière')),
            ],
            options={
                'verbose_name': 'Artiste',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ArtistsCatalogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('intro', wagtail.core.fields.RichTextField(blank=True)),
            ],
            options={
                'verbose_name': 'Catalogue artistes',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ArtistPageYoutubeLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('youtube', models.URLField(max_length=300, null=True, unique=True, verbose_name='Lien Youtube')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='youtube_link', to='artists.ArtistPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtistPageWebsiteLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('website', models.URLField(max_length=300, null=True, unique=True, verbose_name='Lien Site web')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='website_link', to='artists.ArtistPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtistPageTwitterLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('twitter', models.URLField(max_length=300, null=True, unique=True, verbose_name='Lien Twitter')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='twitter_link', to='artists.ArtistPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtistPagePlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('link', models.URLField(help_text='Ne garder que le lien du code                   embed, par ex. https://open.spotify.com/embed/album/***', max_length=300, null=True, verbose_name='Code embed')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='audio', to='artists.ArtistPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtistPageInstagramLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('instagram', models.URLField(max_length=300, null=True, unique=True, verbose_name='Lien Instagram')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='insta_link', to='artists.ArtistPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtistPageGigs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('date', models.DateField(null=True, verbose_name='Date')),
                ('city', models.CharField(max_length=100, null=True, verbose_name='Ville')),
                ('location', models.CharField(max_length=300, null=True, verbose_name='Lieu')),
                ('link', models.URLField(max_length=300, null=True, verbose_name='Lien événement')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='gigs', to='artists.ArtistPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtistPageFacebookLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('facebook', models.URLField(max_length=300, null=True, unique=True, verbose_name='Lien Facebook')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='fb_link', to='artists.ArtistPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
