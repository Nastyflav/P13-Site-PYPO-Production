# Generated by Django 3.0.8 on 2020-08-24 17:05

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.embeds.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('wagtailimages', '0022_uploadedimage'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'verbose_name': 'Index blog',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('date', models.DateField(verbose_name='Date')),
                ('intro', models.CharField(max_length=250)),
                ('body', wagtail.core.fields.RichTextField(blank=True)),
                ('page_bottom', wagtail.core.fields.StreamField([('video', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Type de recommandation', required=True)), ('richtext_content', wagtail.core.blocks.RichTextBlock(required=True)), ('video', wagtail.embeds.blocks.EmbedBlock(help_text='Insérer une url comme par ex. https://youtu.be/yRmZ6WUfoOc', label='Vidéo')), ('position', wagtail.core.blocks.ChoiceBlock(choices=[('right', 'Droite'), ('left', 'Gauche'), ('center', 'Centre')], label='Position', required=False)), ('size', wagtail.core.blocks.ChoiceBlock(choices=[('small', 'Petit'), ('medium', 'Médium'), ('large', 'Grand')], label='Taille', required=False))])), ('text', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(label='Type de recommandation', required=True)), ('richtext_content', wagtail.core.blocks.RichTextBlock(label='Description vidéo', required=True)), ('position', wagtail.core.blocks.ChoiceBlock(choices=[('right', 'Droite'), ('left', 'Gauche'), ('center', 'Centre')], label='Position', required=False)), ('size', wagtail.core.blocks.ChoiceBlock(choices=[('small', 'Petit'), ('medium', 'Médium'), ('large', 'Grand')], label='Taille', required=False))]))], blank=True)),
            ],
            options={
                'verbose_name': 'Billet blog',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogTagIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blog.BlogPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blog_blogpagetag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlogPageGalleryImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('caption', models.CharField(blank=True, max_length=250)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_images', to='blog.BlogPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
